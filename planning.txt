# from collections import ChainMap
# dict1 = {"one": 1, "two": 2}
# dict2 = {"three": 3, "four": 4}
# chain = ChainMap(dict1, dict2)

# datatype/class GraphNode(tuple/coordinate location, arraylist neighbors, boolean/option finish)
# TODO: arrays that keep track of which nodes have been visited and which haven't
# TODO: how to find shortest path after finding finish?
#    SOLUTION: keep track of last visited node as program traverses through each node

# HOW TO CREATE MAZES
# GUI where you can place a start and end and build walls
#    CHECKS: start and end have been placed, condition for if there's no way to reach the finish

# IF DISTANCE/WEIGHT DOESN'T MATTER, HOW DO WE CHOOSE WHICH PATH?
#    IDEA 1: Random
#    IDEA 2: Research other algorithms
